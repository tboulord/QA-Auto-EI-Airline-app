<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="7" time="2.526" timestamp="2024-11-17T18:56:14.616518+00:00" hostname="1b03a659a7ab"><testcase classname="test_booking" name="test_create_flight_booking_with_valid_customer" time="0.650"><properties><property name="status" value="PASSED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties></testcase><testcase classname="test_booking" name="test_create_booking_with_mismatched_customer_name" time="0.204"><properties><property name="status" value="PASSED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties></testcase><testcase classname="test_booking" name="test_delete_valid_booking" time="0.285"><properties><property name="status" value="PASSED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties></testcase><testcase classname="test_customer" name="test_update_customer_information" time="0.366"><properties><property name="status" value="FAILED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties><failure message="AssertionError: assert 400 == 200&#10; +  where 400 = &lt;APIResponse url='http://airline_api_dev:8000/flights/AAA01/passengers/1' status=400 status_text='Bad Request'&gt;.status">api_request_context = &lt;playwright._impl._fetch.APIRequestContext object at 0x7f65b50a0c90&gt;
wiremock_admin_context = &lt;playwright._impl._fetch.APIRequestContext object at 0x7f65b5df03d0&gt;
test_data = {'customers': [{'first_name': 'First', 'flight_id': 'AAA01', 'last_name': 'Name', 'passport_id': 'BC1500'}, {'first_na..._timezone': 'Asia/Bangkok', 'departure_time_utc': '2024-12-01T09:00:00Z', 'departure_timezone': 'Europe/London', ...}]}

    @pytest.mark.asyncio
    async def test_update_customer_information(
        api_request_context: APIRequestContext,
        wiremock_admin_context: APIRequestContext,
        test_data
    ):
        """
        Test Scenario:
        Update the information of an existing customer and validate that the changes are correctly applied.
    
        """
        customer_data = test_data["customers"][0]
        passport_id = customer_data["passport_id"]
        first_name = customer_data["first_name"]
        last_name = customer_data["last_name"]
        flight_id = customer_data.get("flight_id", "AAA01")
    
        # Step 2: Create a new customer
        customer_id = await create_customer(
            api_request_context, wiremock_admin_context, passport_id, first_name, last_name, flight_id
        )
    
        try:
            # Step 3: Configure WireMock for successful update
            updated_first_name = "NewFirst"
            await setup_wiremock_stub(wiremock_admin_context, passport_id, updated_first_name, last_name)
    
            # Step 4: Update customer information
            updated_data = {"passport_id": passport_id, "first_name": updated_first_name, "last_name": last_name}
            response = await api_request_context.put(
                f"/flights/{flight_id}/passengers/{customer_id}",
                data=json.dumps(updated_data),
                headers={"Content-Type": "application/json"}
            )
&gt;           assert response.status == 200
E           AssertionError: assert 400 == 200
E            +  where 400 = &lt;APIResponse url='http://airline_api_dev:8000/flights/AAA01/passengers/1' status=400 status_text='Bad Request'&gt;.status

test_customer.py:43: AssertionError</failure></testcase><testcase classname="test_customer" name="test_update_customer_with_mismatched_details" time="0.436"><properties><property name="status" value="PASSED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties></testcase><testcase classname="test_flight" name="test_retrieve_flight_different_timezones" time="0.105"><properties><property name="status" value="PASSED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties></testcase><testcase classname="test_flight" name="test_retrieve_flight_same_timezone" time="0.089"><properties><property name="status" value="PASSED" /><property name="test_data" value="{'customers': [{'passport_id': 'BC1500', 'first_name': 'First', 'last_name': 'Name', 'flight_id': 'AAA01'}, {'passport_id': 'BC1501', 'first_name': 'Second', 'last_name': 'User', 'flight_id': 'BBB02'}], 'flights': [{'id': 'AAA01', 'departure_time_utc': '2024-12-01T00:00:00Z', 'arrival_time_utc': '2024-12-01T02:00:00Z', 'timezone': 'Asia/Bangkok'}, {'id': 'BBB02', 'departure_time_utc': '2024-12-01T09:00:00Z', 'arrival_time_utc': '2024-12-01T17:00:00Z', 'departure_timezone': 'Europe/London', 'arrival_timezone': 'Asia/Bangkok'}]}" /></properties></testcase></testsuite></testsuites>